What is Asynchronous in JavaScript:
-----------------------------------
In JavaScript, asynchronous programming allows tasks to run in parallel or in the background without blocking the execution of other tasks.
 Unlike synchronous code, where each task waits for the previous one to finish, asynchronous code allows multiple operations to happen 
 simultaneously or at different times. This is crucial in JavaScript because it is single-threaded but needs to handle tasks like fetching 
 data from an API, reading files, or responding to user events without freezing the whole application.

Key Concept:
-----------
Non-blocking: Asynchronous code doesn't stop the execution of other tasks while waiting for a long-running task to complete (like fetching 
data or waiting for user input).

Why Use Asynchronous Code:
--------------------------
Improve Performance: Asynchronous programming allows tasks like file reading, API requests, and database operations to run in the background 
                     without freezing the entire application.
Responsiveness: The application remains responsive to user interactions (like clicking or scrolling) even when long-running tasks are in 
                progress.
Efficient Resource Management: Non-blocking behavior makes the most of the system's resources by not tying up the CPU for tasks that take 
                               time, like waiting for a network request.

How Asynchronous Works in JavaScript:
------------------------------------
JavaScript achieves asynchronous behavior through mechanisms like:

Callbacks
Promises
Async/Await

These methods allow you to execute code after a task completes while other code continues to run.

Applications and Advantages:
---------------------------
Web Requests: Fetching data from a server (AJAX calls or fetch()) without blocking the browser, so users can still interact with the page 
              while waiting for data.
Timers: Delaying code execution using setTimeout() or setInterval().
File I/O: Reading and writing to files on the server without halting other operations.

1. Callbacks
-------------
Callbacks are one of the first approaches to handling asynchronous operations. A callback is a function passed into another function as an
 argument, which is executed after the completion of an asynchronous task.

2. Promises
------------
A Promise is a modern way of handling asynchronous operations. It represents a value that may be available now, or in the future, or never.
 Promises help avoid the messy "callback hell" that arises when multiple callbacks are nested inside each other.

States of a Promise:
Pending: The initial state.
Fulfilled: The promise has been completed successfully.
Rejected: The promise has failed, usually with an error.

3. Async/Await:
--------------
Async/Await is a cleaner way to work with promises and handle asynchronous code. It looks synchronous but runs asynchronously. The async 
keyword makes a function return a promise, and the await keyword makes JavaScript wait for that promise to resolve before continuing.


Advantages of Asynchronous Programming
--------------------------------------
Non-blocking: Other tasks can run while waiting for long-running tasks (e.g., API requests, file reading).
Responsive Applications: Keeps user interfaces responsive. For example, users can still interact with a webpage even while data is being
                         fetched in the background.
Efficient Resource Usage: It doesnâ€™t waste CPU time waiting for I/O or network tasks to finish

Conclusion:
------------
Asynchronous programming allows JavaScript to perform non-blocking tasks efficiently, making it ideal for handling web requests, 
file operations, and user interactions without freezing the entire application.
Callbacks, Promises, and Async/Await are the core ways to work with asynchronous code.
The goal of asynchronous code is to improve performance, responsiveness, and efficiency, especially in modern web applications.