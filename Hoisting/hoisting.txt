
Hoisting :
----------
is a JavaScript mechanism where variables and function declarations are moved to the top of their scope 
(either global or local) before the code is executed.

Hoisting allows you to use variables or functions before they appear in the code, 
but their initialization or assignment happens at the point where they are written.

Function Declarations are hoisted completely (both the name and the function body).
Variable Declarations (using var) are hoisted, but only the declaration, not the assignment. 
Variables declared with let and const are hoisted but remain uninitialized (they are in a "temporal dead zone" until they are assigned a value).


1. Function Hoisting:
--------------------------
In JavaScript, function declarations are fully hoisted. This means that you can call a function even before you declare it.

Example:
--------
msg(); 
function msg() {
  console.log("How Are You!");
}

In this example, the function greet() is called before it is defined, but it works because the function declaration is hoisted to the top of the scope.

Hoisting Process:
-----------------
Behind the scenes, JavaScript moves the entire function declaration to the top:

function greet() {
  console.log("Hello!");
}
greet(); 


2. Variable Hoisting with var:
------------------------------
When using var, only the declaration is hoisted, not the initialization (assignment). The variable is set to undefined until it is assigned a value.

Example:
--------
console.log(x); 
var x = 5;
console.log(x);  
In this case, the declaration of x is hoisted, but its value (5) is assigned later. So, x is undefined until the assignment occurs.

Hoisting Process:
-----------------
Behind the scenes, JavaScript treats the code as:
javascript
Copy code
var x;            // Declaration is hoisted
console.log(x);   // Output: undefined
x = 5;            // Assignment happens here
console.log(x);   // Output: 5 



3. Variable Hoisting with let and const:
----------------------------------------
Variables declared with let and const are also hoisted, but they are not initialized until the interpreter reaches the declaration.
Accessing them before the declaration will result in a ReferenceError. This period between the start of the block and the variable declaration is known as the "temporal dead zone".

Example with let:
---------------------
console.log(y);  // ReferenceError: Cannot access 'y' before initialization
let y = 10;
console.log(y);  // Output: 10
Unlike var, the let variable is hoisted but not initialized. You can't access it before its declaration.

Example with const:
---------------------
console.log(z);  // ReferenceError: Cannot access 'z' before initialization
const z = 20;
console.log(z);  // Output: 20
const behaves similarly to let, but you must also initialize it at the time of declaration. You cannot leave it uninitialized.

