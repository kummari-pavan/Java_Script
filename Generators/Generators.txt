Generators in JavaScript:
------------------------
A generator in JavaScript is like a special function that can stop in the middle of its work and then start again where it left off. 
Normally, when you call a function, it does everything at once. But a generator can pause and return a value when you ask for it.

Why Use:
---------
We use generators because they can save memory and make it easier to handle data in chunks, especially when:

1.You donâ€™t want to load everything into memory at once.
2.You want to do things one step at a time (like reading a book page by page instead of all at once).
3.You are dealing with something that takes time, like fetching data from the internet, and you want to control the flow of
 when to get the next piece of data.

Applications and Advantages:
---------------------------
---> Memory Efficient     : You only get one value at a time, so you don't have to load everything at once (helpful with large lists or data).
---> Simplifies Async Code: When dealing with things that take time (like fetching data from a server), generators can make your code look 
                            simpler and easier to follow.
---> Custom Iterators     : You can create custom loops that produce values one by one, exactly when you need them.

Different Types of Generators:
------------------------------

1.Simple Generators: Just pause and resume with each yield.
2.Delegating Generators: A generator that can call another generator.
3.Asynchronous Generators: Handles promises, making async operations easier to write.

Conclusion:
-----------
Generators are useful because they allow you to process things one step at a time, making your code more efficient and easier to manage,
 especially when dealing with large amounts of data or tasks that take time (like downloading files or waiting for server responses)