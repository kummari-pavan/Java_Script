REPL in JavaScript:
---------------------------
REPL stands for Read-Eval-Print Loop. It’s an interactive environment where you can write and run JavaScript code, line by line. REPL 
is often used in Node.js but can also be found in browser developer tools.

In simple terms, REPL allows you to:
--------------------------------------
Read: It reads the user’s input (your code).
Eval: It evaluates or executes the code you entered.
Print: It prints the result of that code execution.
Loop: It loops back and waits for the next input.

Why Use REPL:
------------
REPL is useful for quickly testing small pieces of JavaScript code without having to write a full program. You can:

1.Experiment with code.
2.Debug problems on the fly.
3.Test JavaScript functions and logic in real-time.


Applications and Advantages:
----------------------------
Immediate Feedback     : You get instant results for the code you type, which is great for learning or experimenting with JavaScript.
                         Debugging: REPL helps debug small code snippets quickly without needing an entire environment setup.
Interactive Development: Developers can test functions, try out new features, and understand how different code snippets behave in real-time.

Different Types of REPL:
------------------------
Node.js REPL             : Comes built-in with Node.js and allows you to run JavaScript outside the browser.
Browser Developer Console: Most browsers (like Chrome, Firefox) have a REPL in the form of the developer console, where you can run JavaScript directly in the browser.
Online REPLs             : Websites like JSFiddle, CodePen, and Replit also offer REPL environments for JavaScript.

Conclusion:
-----------
REPL is a powerful tool for developers to interact with JavaScript in a real-time, interactive way. It is perfect for quick tests, 
learning, and debugging. The looping behavior of REPL makes it convenient to experiment with small snippets of code without having to 
reload or set up a full environment.

Example (Using Node.js REPL):
----------------------------
---> Open your terminal.
---> Type node to enter the Node.js REPL.
---> Now you can type JavaScript code and see the result immediately.
---> bash

$ node
> 2 + 2
4
> let name = "John";
undefined
> name
'John'
> console.log("Hello " + name);
Hello John
undefined


Using REPL in the Browser:
--------------------------
---> Open your browser's Developer Tools (Ctrl+Shift+I or F12).
---> Go to the "Console" tab.
---> You can type any JavaScript code directly and see the results.

Example:

> console.log('Hello, World!')
Hello, World!

